/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package basiclayout;

import static basiclayout.SQLHandler.*;
import com.itextpdf.text.DocumentException;
import java.io.IOException;
import java.sql.*;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jaina_000
 */
public class NewJFrame extends javax.swing.JFrame {

    int number, amt , actual_amt, flag, entry, selectRow, type=0;
    DefaultTableModel model, subtotal_model, model_sort;

    String tableC = "categorymaster", tableE = "expenseincomemaster";
    String editDate;
    Date userDate;    
    


    Object[] sort_row = new Object[4], newrow = new Object[7];

    
    /**
     * Creates new form NewJFrame
     */
     
     
    @SuppressWarnings("empty-statement")
    public NewJFrame() 
    {
        initComponents();
        
        fillGrid();
    }

    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        buttonGroup1 = new javax.swing.ButtonGroup();
        MainTabPane = new javax.swing.JTabbedPane();
        entrytable_panel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        title = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        transaction_amt = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        details = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        submitButton = new javax.swing.JButton();
        transaction_type = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        categories1 = new javax.swing.JComboBox();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        date = new com.toedter.calendar.JDateChooser();
        warn = new javax.swing.JLabel();
        warn2 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableOfDetails = new javax.swing.JTable();
        subtotal_panel = new javax.swing.JPanel();
        automobile = new javax.swing.JCheckBox();
        buy_investment = new javax.swing.JCheckBox();
        cash_withdrawal = new javax.swing.JCheckBox();
        charitable_donations = new javax.swing.JCheckBox();
        jScrollPane7 = new javax.swing.JScrollPane();
        find_subtotal_table = new javax.swing.JTable();
        send_back_from_table = new javax.swing.JButton();
        send_to_table = new javax.swing.JButton();
        children_toys = new javax.swing.JCheckBox();
        Credit_Card_Payments = new javax.swing.JCheckBox();
        dining_out = new javax.swing.JCheckBox();
        education = new javax.swing.JCheckBox();
        clothing = new javax.swing.JCheckBox();
        home_improvement = new javax.swing.JCheckBox();
        hobbies_leisure = new javax.swing.JCheckBox();
        healthcare = new javax.swing.JCheckBox();
        groceries = new javax.swing.JCheckBox();
        gifts = new javax.swing.JCheckBox();
        fees = new javax.swing.JCheckBox();
        entertainment = new javax.swing.JCheckBox();
        mortgage_rent = new javax.swing.JCheckBox();
        insurance = new javax.swing.JCheckBox();
        phone_wireless = new javax.swing.JCheckBox();
        miscellaneous = new javax.swing.JCheckBox();
        loan = new javax.swing.JCheckBox();
        personal_care = new javax.swing.JCheckBox();
        pet_care = new javax.swing.JCheckBox();
        household = new javax.swing.JCheckBox();
        taxes = new javax.swing.JCheckBox();
        services_mem = new javax.swing.JCheckBox();
        income_interest = new javax.swing.JCheckBox();
        other_income = new javax.swing.JCheckBox();
        investment_income = new javax.swing.JCheckBox();
        utilities = new javax.swing.JCheckBox();
        travel_vacation = new javax.swing.JCheckBox();
        wages_salary = new javax.swing.JCheckBox();
        start_date_label1 = new javax.swing.JLabel();
        start_date1 = new com.toedter.calendar.JDateChooser();
        end_date1 = new com.toedter.calendar.JDateChooser();
        end_date_label1 = new javax.swing.JLabel();
        generate_subtotals = new javax.swing.JButton();
        st1_date_warn = new javax.swing.JLabel();
        end1_date_warn = new javax.swing.JLabel();
        generateReport = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Entry Title");

        title.setText("Title Here");
        title.setSize(200, 18);
        title.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titleActionPerformed(evt);
            }
        });

        jLabel3.setText("Category");

        jLabel4.setText("Transaction Amount");

        jLabel5.setText("Entry Date");

        transaction_amt.setText("100");
        transaction_amt.setSize(200, 18);
        transaction_amt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transaction_amtActionPerformed(evt);
            }
        });

        details.setColumns(20);
        details.setRows(5);
        details.setText("Details here");
        jScrollPane3.setViewportView(details);

        jLabel2.setText("Transaction Details");

        submitButton.setText("Submit !");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        transaction_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Expense", "Income"}));
        transaction_type.setSize(200, 18);
        transaction_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transaction_typeActionPerformed(evt);
            }
        });

        jLabel6.setText("Transaction Type");

        categories1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Automobile","Buy Investment", "Cash Widthdrawal","Charitable Donations","Children/Toys", "Clothing" ,"Credit Card Payments/Transfers" ,"Dining Out" ,"Education" ,"Entertainment" ,"Fees" ,"Gifts" ,"Groceries" ,"Healthcare" ,"Hobbies/Leisure" ,"Home Improvement" ,"Household" ,"Insurance" ,"Loan" ,"Miscellaneous" ,"Mortgage/Rent","Personal Care","Pet Care", "Phone/Wireless","Services/Membership\n","Taxes", "Travel/Vacation","Cusstom","Utilities"}));
        categories1.setSize(200, 18);
        categories1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categories1ActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete !");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        warn.setForeground(new java.awt.Color(255, 51, 0));

        warn2.setForeground(new java.awt.Color(255, 51, 0));

        TableOfDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Entry Title", "Category", "Entry Date", "Trans. Amount", "Type", "Details"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableOfDetails.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(TableOfDetails);

        javax.swing.GroupLayout entrytable_panelLayout = new javax.swing.GroupLayout(entrytable_panel);
        entrytable_panel.setLayout(entrytable_panelLayout);
        entrytable_panelLayout.setHorizontalGroup(
            entrytable_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(entrytable_panelLayout.createSequentialGroup()
                .addGroup(entrytable_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(entrytable_panelLayout.createSequentialGroup()
                        .addGroup(entrytable_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(entrytable_panelLayout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addGroup(entrytable_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel6))
                                .addGap(23, 23, 23))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, entrytable_panelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(entrytable_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(entrytable_panelLayout.createSequentialGroup()
                                .addGroup(entrytable_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(categories1, 0, 190, Short.MAX_VALUE)
                                    .addComponent(transaction_amt))
                                .addGap(59, 59, 59)
                                .addComponent(jLabel2))
                            .addGroup(entrytable_panelLayout.createSequentialGroup()
                                .addGroup(entrytable_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(transaction_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE))
                                .addGap(90, 90, 90)
                                .addComponent(jLabel5))
                            .addComponent(warn, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(entrytable_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addGroup(entrytable_panelLayout.createSequentialGroup()
                                .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(warn2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, entrytable_panelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane6)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, entrytable_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(submitButton)
                .addGap(43, 43, 43)
                .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(285, 285, 285))
        );
        entrytable_panelLayout.setVerticalGroup(
            entrytable_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(entrytable_panelLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(entrytable_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(entrytable_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5))
                    .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(warn2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(entrytable_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(entrytable_panelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(entrytable_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(transaction_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(entrytable_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(entrytable_panelLayout.createSequentialGroup()
                                .addGroup(entrytable_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(categories1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, entrytable_panelLayout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(22, 22, 22)))
                        .addGroup(entrytable_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(transaction_amt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addGroup(entrytable_panelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(warn, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addGroup(entrytable_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitButton)
                    .addComponent(editButton)
                    .addComponent(deleteButton))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(117, 117, 117))
        );

        MainTabPane.addTab("      Entry Table       ", entrytable_panel);

        automobile.setText("Automobile");
        automobile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                automobileActionPerformed(evt);
            }
        });

        buy_investment.setText("Buy Investment");
        buy_investment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buy_investmentActionPerformed(evt);
            }
        });

        cash_withdrawal.setText("Cash Widthdrawal");
        cash_withdrawal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cash_withdrawalActionPerformed(evt);
            }
        });

        charitable_donations.setText("Charitable Donations");

        find_subtotal_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Category ", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(find_subtotal_table);
        if (find_subtotal_table.getColumnModel().getColumnCount() > 0) {
            find_subtotal_table.getColumnModel().getColumn(0).setResizable(false);
            find_subtotal_table.getColumnModel().getColumn(1).setResizable(false);
        }

        send_back_from_table.setText("<<");
        send_back_from_table.setEnabled(false);
        send_back_from_table.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                send_back_from_tableActionPerformed(evt);
            }
        });

        send_to_table.setText(">>");
        send_to_table.setEnabled(true);
        send_to_table.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                send_to_tableActionPerformed(evt);
            }
        });

        children_toys.setText("Children/Toys");
        children_toys.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                children_toysActionPerformed(evt);
            }
        });

        Credit_Card_Payments.setText("Credit Card Payments/Transfers");
        Credit_Card_Payments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Credit_Card_PaymentsActionPerformed(evt);
            }
        });

        dining_out.setText("Dining Out");
        dining_out.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dining_outActionPerformed(evt);
            }
        });

        education.setText("Education");

        clothing.setText("Clothing");

        home_improvement.setText("Home Improvement");
        home_improvement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                home_improvementActionPerformed(evt);
            }
        });

        hobbies_leisure.setText("Hobbies/Leisure");
        hobbies_leisure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hobbies_leisureActionPerformed(evt);
            }
        });

        healthcare.setText("Healthcare");
        healthcare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                healthcareActionPerformed(evt);
            }
        });

        groceries.setText("Groceries");
        groceries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groceriesActionPerformed(evt);
            }
        });

        gifts.setText("Gifts");
        gifts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                giftsActionPerformed(evt);
            }
        });

        fees.setText("Fees");
        fees.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feesActionPerformed(evt);
            }
        });

        entertainment.setText("Entertainment");
        entertainment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entertainmentActionPerformed(evt);
            }
        });

        mortgage_rent.setText("Mortgage/Rent");
        mortgage_rent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mortgage_rentActionPerformed(evt);
            }
        });

        insurance.setText("Insurance");
        insurance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insuranceActionPerformed(evt);
            }
        });

        phone_wireless.setText("Phone/Wireless");

        miscellaneous.setText("Miscellaneous");

        loan.setText("Loan");
        loan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loanActionPerformed(evt);
            }
        });

        personal_care.setText("Personal Care");
        personal_care.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personal_careActionPerformed(evt);
            }
        });

        pet_care.setText("Pet Care");
        pet_care.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pet_careActionPerformed(evt);
            }
        });

        household.setText("Household");
        household.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                householdActionPerformed(evt);
            }
        });

        taxes.setText("Taxes");

        services_mem.setText("Services/Membership");
        services_mem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                services_memActionPerformed(evt);
            }
        });

        income_interest.setText("Income/Interest");

        other_income.setText("Other Income");

        investment_income.setText("Investment Income");
        investment_income.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                investment_incomeActionPerformed(evt);
            }
        });

        utilities.setText("Utilities");
        utilities.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                utilitiesActionPerformed(evt);
            }
        });

        travel_vacation.setText("Travel/Vacation");

        wages_salary.setText("Wages & Salary");

        start_date_label1.setText("Start Date ");

        end_date_label1.setText(" End  Date");

        generate_subtotals.setText("Generate Subtotals !");
        generate_subtotals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generate_subtotalsActionPerformed(evt);
            }
        });

        st1_date_warn.setForeground(new java.awt.Color(255, 51, 0));

        end1_date_warn.setForeground(new java.awt.Color(255, 51, 0));

        generateReport.setText("Generate Report !");
        generateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout subtotal_panelLayout = new javax.swing.GroupLayout(subtotal_panel);
        subtotal_panel.setLayout(subtotal_panelLayout);
        subtotal_panelLayout.setHorizontalGroup(
            subtotal_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subtotal_panelLayout.createSequentialGroup()
                .addGroup(subtotal_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(subtotal_panelLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(subtotal_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(automobile, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buy_investment, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cash_withdrawal, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(charitable_donations, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(children_toys, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dining_out, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(education, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(entertainment, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fees, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(gifts, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Credit_Card_Payments))
                        .addGap(14, 14, 14)
                        .addGroup(subtotal_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(groceries, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(healthcare, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hobbies_leisure, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(home_improvement, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clothing, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(household, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(insurance, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(loan, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(miscellaneous, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mortgage_rent, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(personal_care, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(subtotal_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pet_care, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(phone_wireless, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(services_mem)
                            .addComponent(taxes, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(travel_vacation, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(utilities, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(income_interest, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(investment_income, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(other_income, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(wages_salary, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(69, 69, 69)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(subtotal_panelLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(subtotal_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(st1_date_warn, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(subtotal_panelLayout.createSequentialGroup()
                                .addComponent(start_date_label1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(start_date1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(173, 173, 173)
                        .addGroup(subtotal_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, subtotal_panelLayout.createSequentialGroup()
                                .addComponent(end_date_label1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(end_date1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(end1_date_warn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(subtotal_panelLayout.createSequentialGroup()
                        .addGap(228, 228, 228)
                        .addComponent(send_to_table)
                        .addGap(300, 300, 300)
                        .addComponent(send_back_from_table)
                        .addGap(66, 66, 66)
                        .addGroup(subtotal_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(generateReport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(generate_subtotals, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE))))
                .addGap(41, 41, 41))
        );
        subtotal_panelLayout.setVerticalGroup(
            subtotal_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subtotal_panelLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(subtotal_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(start_date_label1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(start_date1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(end_date_label1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(end_date1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(subtotal_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(st1_date_warn, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(end1_date_warn, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(subtotal_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(subtotal_panelLayout.createSequentialGroup()
                        .addComponent(automobile)
                        .addGap(20, 20, 20)
                        .addComponent(buy_investment)
                        .addGap(20, 20, 20)
                        .addComponent(cash_withdrawal)
                        .addGap(20, 20, 20)
                        .addComponent(charitable_donations)
                        .addGap(20, 20, 20)
                        .addComponent(children_toys)
                        .addGap(20, 20, 20)
                        .addComponent(dining_out)
                        .addGap(20, 20, 20)
                        .addComponent(education)
                        .addGap(20, 20, 20)
                        .addComponent(entertainment)
                        .addGap(20, 20, 20)
                        .addComponent(fees)
                        .addGap(20, 20, 20)
                        .addComponent(gifts)
                        .addGap(20, 20, 20)
                        .addComponent(Credit_Card_Payments))
                    .addGroup(subtotal_panelLayout.createSequentialGroup()
                        .addComponent(groceries)
                        .addGap(20, 20, 20)
                        .addComponent(healthcare)
                        .addGap(20, 20, 20)
                        .addComponent(hobbies_leisure)
                        .addGap(20, 20, 20)
                        .addComponent(home_improvement)
                        .addGap(20, 20, 20)
                        .addComponent(clothing)
                        .addGap(20, 20, 20)
                        .addComponent(household)
                        .addGap(20, 20, 20)
                        .addComponent(insurance)
                        .addGap(20, 20, 20)
                        .addGroup(subtotal_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(loan)
                            .addComponent(income_interest))
                        .addGap(20, 20, 20)
                        .addGroup(subtotal_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(miscellaneous)
                            .addComponent(investment_income))
                        .addGap(20, 20, 20)
                        .addGroup(subtotal_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mortgage_rent)
                            .addComponent(other_income))
                        .addGap(20, 20, 20)
                        .addGroup(subtotal_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(personal_care)
                            .addComponent(wages_salary)))
                    .addGroup(subtotal_panelLayout.createSequentialGroup()
                        .addComponent(pet_care)
                        .addGap(20, 20, 20)
                        .addComponent(phone_wireless)
                        .addGap(20, 20, 20)
                        .addComponent(services_mem)
                        .addGap(20, 20, 20)
                        .addComponent(taxes)
                        .addGap(20, 20, 20)
                        .addComponent(travel_vacation)
                        .addGap(20, 20, 20)
                        .addComponent(utilities))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(subtotal_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(send_to_table)
                    .addComponent(send_back_from_table)
                    .addComponent(generate_subtotals))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(generateReport)
                .addContainerGap())
        );

        MainTabPane.addTab("     Finding selected subtotals    ", subtotal_panel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainTabPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(MainTabPane, javax.swing.GroupLayout.PREFERRED_SIZE, 668, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        deleteRow();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed

        SimpleDateFormat formatter_for_editDate = new SimpleDateFormat("YYYY-MM-dd");
        Date date1 = null;
        warn.setText(null);
        warn2.setText(null);
        
        selectRow = TableOfDetails.getSelectedRow();
        if(selectRow != -1)
        {
            Object dataR[] = new Object[6];
            for(int col=0; col<model.getColumnCount();col++)    // gets the value of selected row in dataR[] array
            {
                dataR[col] = model.getValueAt(selectRow, col);
            }

            title.setText(dataR[0].toString());
            editDate = dataR[2].toString();
            transaction_amt.setText(dataR[3].toString());
            details.setText(dataR[5].toString());
            
            System.out.println(editDate);

            try {
                date1 = formatter_for_editDate.parse(editDate);
                System.out.println(date1);
                date.setDate(date1);
            } catch (ParseException ex) {
            }

            
            entry = selectRow+1;                 
            //update here
            if((dataR[4].toString())== "Expense")
            {
                transaction_type.setSelectedIndex(0);
            }
            else
            {
                transaction_type.setSelectedIndex(1);
            }
            categories1.setSelectedItem(dataR[1].toString());
            flag = 1;
        }
        else
        {
            warn.setText("Select 1 Row To Edit");
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void categories1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categories1ActionPerformed

    }//GEN-LAST:event_categories1ActionPerformed

    private void transaction_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transaction_typeActionPerformed

        switch(transaction_type.getSelectedItem().toString())
        {
            case "Income":
            type = 0;
            break;

            case "Expense":
            type = 1;
            break;
        }
        if(type==1)
        {
            categories1.removeAll();
            categories1.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"Automobile","Buy Investment", "Cash Widthdrawal","Charitable Donations","Children/Toys", "Clothing" ,"Credit Card Payments/Transfers" ,"Dining Out" ,"Education" ,"Entertainment" ,"Fees" ,"Gifts" ,"Groceries" ,"Healthcare" ,"Hobbies/Leisure" ,"Home Improvement" ,"Household" ,"Insurance" ,"Loan" ,"Miscellaneous" ,"Mortgage/Rent","Personal Care","Pet Care", "Phone/Wireless","Services/Membership\n","Taxes", "Travel/Vacation","Utilities"}));
        }
        else
        {
            categories1.removeAll();
            categories1.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"Income/Interest", "Investment Income", "Other Income", "Wages & Salary"}));
        }
    }//GEN-LAST:event_transaction_typeActionPerformed


    
    @SuppressWarnings("deprecation")
    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        
        String sqldate = "";
        System.out.println( date.getDate() );
        
        try
        {
            actual_amt = 0;
            warn.setText("");
            warn2.setText("");

            String datePattern1 = "\\d{4}-\\d{1,2}-\\d{1,2}";

            DateFormat df = new SimpleDateFormat("YYYY-MM-dd");

            try{
                sqldate = df.format(date.getDate());
                System.out.println(sqldate);
                
                if(sqldate.matches(datePattern1))
                {
                    amt = Integer.parseInt(transaction_amt.getText());

                    if( amt <= 0 )
                    {
                        warn.setText("Enter +ve amount");
                        throw new ArithmeticException();
                    }
                    
                    if(transaction_type.getSelectedItem() == "Expense"){
                        actual_amt = -amt;
                    }else{
                        actual_amt = amt;
                    }
                    number++;

                    
                    initialize_connection();

                    
                    resultset1 = statement1.executeQuery("Select * from "+tableC+" WHERE CategoryName='"+categories1.getSelectedItem()+"'");
                    resultset1.next();

                    if(flag==0)
                    {

                        try {

                            statement2.executeUpdate("Insert INTO "+tableE+" (ExpenseIncomeID,Date,CategoryID,Amount,Title,Description) VALUES "
                                + "('"+number+"','"+sqldate+"','"+resultset1.getString(1)+"','"
                                +actual_amt+"','"+title.getText()+"','"+details.getText()+"')");
                        }
                        catch (SQLException e) {
                            System.out.println(e.getMessage());
                        }

                        warn.setText("");
                    }

                    // if the editButton is pressed prior to submit buttton then following code will be executed
                    else
                    {
                        
                          statement2.executeUpdate("Update "+tableE+" set Date='"+sqldate+"',CategoryID='"+resultset1.getString(1)+"',"
                                  + "Amount='"+actual_amt+"',Title='"+title.getText()+"',Description='"+details.getText()+
                                  "' where ExpenseIncomeID='"+entry+"'");


                        flag = 0;
                        number--;
                    }                   

                                        
                    close_connection();
                    
                    
                    fillGrid();
                    
                    title.setText("");
                    
                    details.setText("");
                    transaction_type.setSelectedIndex(0);
                    categories1.setSelectedIndex(0);
                    date.setDate(null);
                    transaction_amt.setText("");
                    
                }
                else if(!sqldate.matches(datePattern1))
                {
                    warn2.setText("Enter proper date");
                    amt = Integer.parseInt(transaction_amt.getText());
                    transaction_amt.setText("");
                }

                if( amt <= 0 )
                    {
                        warn.setText("Enter +ve amount");
                        throw new ArithmeticException();
                    }
            }
            catch(NullPointerException e){
                
                if("".equals(transaction_amt.getText())){
                    warn.setText("Enter any amount");
                }
                else if(Integer.parseInt(transaction_amt.getText()) <0){
                    warn.setText("Enter +ve amount");
                }
                if(!sqldate.matches(datePattern1))             
                    warn2.setText("Enter proper date");
                

                
            }
        }
        catch(ArithmeticException a){
            
        }
        catch(NumberFormatException e){
                        if("".equals(transaction_amt.getText()))
                                warn.setText("Enter any amount");
                        else{
                            warn.setText("Enter proper amount");
                        }
        } catch (ClassNotFoundException | SQLException ex) {
                        System.out.println("...Class Not Found Exception | Sql Exception...");
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    private void transaction_amtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transaction_amtActionPerformed

    }//GEN-LAST:event_transaction_amtActionPerformed

    private void titleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titleActionPerformed
        
    }//GEN-LAST:event_titleActionPerformed

    private void automobileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_automobileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_automobileActionPerformed

    private void buy_investmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buy_investmentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buy_investmentActionPerformed

    private void cash_withdrawalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cash_withdrawalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cash_withdrawalActionPerformed

    private void send_back_from_tableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_send_back_from_tableActionPerformed
        
        
        send_to_table.setEnabled(true);
        send_back_from_table.setEnabled(false);
        
        try{    
            if(subtotal_model.getRowCount()!= 0 || subtotal_model.getRowCount()!= -1){
                for( int i = subtotal_model.getRowCount()- 1; i >= 0; i-- ) {
                    subtotal_model.removeRow(i);
                }
            }
        }    
        catch(NullPointerException e){
        
        }
    }//GEN-LAST:event_send_back_from_tableActionPerformed

    Object [] insert_category = new Object [2];

    private void send_to_tableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_send_to_tableActionPerformed
       
        
        send_to_table.setEnabled(false);
        
        subtotal_model = (DefaultTableModel)find_subtotal_table.getModel();
        
        
        
        if(automobile.isSelected()){
            insert_category[0] = automobile.getText();
            subtotal_model.addRow(insert_category);
        }
        if(buy_investment.isSelected()){
            insert_category[0] = buy_investment.getText();
            subtotal_model.addRow(insert_category);
        }
        if(cash_withdrawal.isSelected()){
            insert_category[0] = cash_withdrawal.getText();
            subtotal_model.addRow(insert_category);
        }
        if(charitable_donations.isSelected()){
            insert_category[0] = charitable_donations.getText();
            subtotal_model.addRow(insert_category);
        }
        if(children_toys.isSelected()){
            insert_category[0] = children_toys.getText();
            subtotal_model.addRow(insert_category);
        }
        if(Credit_Card_Payments.isSelected()){
            insert_category[0] = Credit_Card_Payments.getText();
            subtotal_model.addRow(insert_category);
        }
        if(education.isSelected()){
            insert_category[0] = education.getText();
            subtotal_model.addRow(insert_category);
        }
        if(entertainment.isSelected()){
            insert_category[0] = entertainment.getText();
            subtotal_model.addRow(insert_category);
        }
        if(fees.isSelected()){
            insert_category[0] = fees.getText();
            subtotal_model.addRow(insert_category);
        }
        if(gifts.isSelected()){
            insert_category[0] = gifts.getText();
            subtotal_model.addRow(insert_category);
        }
        if(dining_out.isSelected()){
            insert_category[0] = dining_out.getText();
            subtotal_model.addRow(insert_category);
        }
        if(groceries.isSelected()){
            insert_category[0] = groceries.getText();
            subtotal_model.addRow(insert_category);
        }
        if(healthcare.isSelected()){
            insert_category[0] = healthcare.getText();
            subtotal_model.addRow(insert_category);
        }
        if(hobbies_leisure.isSelected()){
            insert_category[0] = hobbies_leisure.getText();
            subtotal_model.addRow(insert_category);
        }
        if(home_improvement.isSelected()){
            insert_category[0] = home_improvement.getText();
            subtotal_model.addRow(insert_category);
        }
        if(household.isSelected()){
            insert_category[0] = household.getText();
            subtotal_model.addRow(insert_category);
        }
        if(insurance.isSelected()){
            insert_category[0] = insurance.getText();
            subtotal_model.addRow(insert_category);
        }
        if(loan.isSelected()){
            insert_category[0] = loan.getText();
            subtotal_model.addRow(insert_category);
        }
        if(miscellaneous.isSelected()){
            insert_category[0] = miscellaneous.getText();
            subtotal_model.addRow(insert_category);
        }
        if(mortgage_rent.isSelected()){
            insert_category[0] = mortgage_rent.getText();
            subtotal_model.addRow(insert_category);
        }
        if(personal_care.isSelected()){
            insert_category[0] = personal_care.getText();
            subtotal_model.addRow(insert_category);
        }
        if(pet_care.isSelected()){
            insert_category[0] = pet_care.getText();
            subtotal_model.addRow(insert_category);
        }
        if(phone_wireless.isSelected()){
            insert_category[0] = phone_wireless.getText();
            subtotal_model.addRow(insert_category);
        }
        if(services_mem.isSelected()){
            insert_category[0] = services_mem.getText();
            subtotal_model.addRow(insert_category);
        }
        if(taxes.isSelected()){
            insert_category[0] = taxes.getText();
            subtotal_model.addRow(insert_category);
        }
        if(travel_vacation.isSelected()){
            insert_category[0] = travel_vacation.getText();
            subtotal_model.addRow(insert_category);
        }
        if(utilities.isSelected()){
            insert_category[0] = utilities.getText();
            subtotal_model.addRow(insert_category);
        }
        if(income_interest.isSelected()){
            insert_category[0] = income_interest.getText();
            subtotal_model.addRow(insert_category);
        }
        if(investment_income.isSelected()){
            insert_category[0] = investment_income.getText();
            subtotal_model.addRow(insert_category);
        }
        if(other_income.isSelected()){
            insert_category[0] = other_income.getText();
            subtotal_model.addRow(insert_category);
        }
        if(wages_salary.isSelected()){
            insert_category[0] = wages_salary.getText();
            subtotal_model.addRow(insert_category);
        }
        
        
            send_back_from_table.setEnabled(true);    
        
    }//GEN-LAST:event_send_to_tableActionPerformed

    private void children_toysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_children_toysActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_children_toysActionPerformed

    private void Credit_Card_PaymentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Credit_Card_PaymentsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Credit_Card_PaymentsActionPerformed

    private void dining_outActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dining_outActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dining_outActionPerformed

    private void home_improvementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_home_improvementActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_home_improvementActionPerformed

    private void hobbies_leisureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hobbies_leisureActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hobbies_leisureActionPerformed

    private void healthcareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_healthcareActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_healthcareActionPerformed

    private void giftsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_giftsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_giftsActionPerformed

    private void feesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_feesActionPerformed

    private void entertainmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entertainmentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_entertainmentActionPerformed

    private void mortgage_rentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mortgage_rentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mortgage_rentActionPerformed

    private void insuranceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insuranceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_insuranceActionPerformed

    private void loanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_loanActionPerformed

    private void personal_careActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personal_careActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_personal_careActionPerformed

    private void pet_careActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pet_careActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pet_careActionPerformed

    private void householdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_householdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_householdActionPerformed

    private void services_memActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_services_memActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_services_memActionPerformed

    private void investment_incomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_investment_incomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_investment_incomeActionPerformed

    private void utilitiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_utilitiesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_utilitiesActionPerformed

    int sub_amt;
    private void generate_subtotalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generate_subtotalsActionPerformed
        
        String st1_date = "", e1_date = "";
        st1_date_warn.setText("");
        end1_date_warn.setText("");
        
        
        
        try{      
                    DateFormat d = new SimpleDateFormat("YYYY-MM-dd");
                    st1_date = d.format(start_date1.getDate());
                    e1_date = d.format(end_date1.getDate());
        
           
        
            try {

                initialize_connection();
                
                    for( int i=0; i < subtotal_model.getRowCount(); i++){

                
                        String subt_cat = subtotal_model.getValueAt(i, 0).toString();

                        resultset1 = statement1.executeQuery("Select * from "+tableC+" WHERE CategoryName='"+subt_cat+"'"); 
                        resultset1.next();
                    
                        resultset2 = statement2.executeQuery("Select * from "+tableE+" WHERE CategoryId= '"+resultset1.getString(1)+"' "
                            + "AND (Date BETWEEN '"+st1_date+"' AND '"+e1_date+"')");
                
                        sub_amt = 0;
                        
                        while(resultset2.next()){             // Adds subtotal, if categoryId of tableC matches that of tableE
                            
                            if( Integer.parseInt(resultset1.getString(1)) == Integer.parseInt(resultset2.getString(3))){
                                System.out.println("amount = "+resultset2.getString(4));
                                sub_amt += Integer.parseInt(resultset2.getString(4));
                            }
                    
                        }
                        subtotal_model.setValueAt(Math.abs(sub_amt), i, 1);
                    }       
                
            }catch( ClassNotFoundException | SQLException e){
            
            }
            
            finally {
              
                close_connection();
                
            }
        }catch(NullPointerException e){
            if(st1_date == "")
                st1_date_warn.setText("Choose a proper start date ");
            if(e1_date == "")
                end1_date_warn.setText("Choose a proper end date ");  
        }    
    }//GEN-LAST:event_generate_subtotalsActionPerformed

    private void groceriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_groceriesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_groceriesActionPerformed

    int final_total;

    private void generateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateReportActionPerformed

        
        String st1_date = "", e1_date = "";
        st1_date_warn.setText("");
        end1_date_warn.setText("");

        try{
            DateFormat d = new SimpleDateFormat("YYYY-MM-dd");
            st1_date = d.format(start_date1.getDate());
            e1_date = d.format(end_date1.getDate());

            new ReportFrame(subtotal_model, st1_date, e1_date);
            dispose();
                            
        }catch(NullPointerException e){
            if( st1_date == "")
                st1_date_warn.setText("Choose a proper start date ");
            if( e1_date == "")
                end1_date_warn.setText("Choose a proper end date ");
        }
        catch(ArrayIndexOutOfBoundsException oob){
            System.out.println("oob inside generate button action performed");
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
                
        
    }//GEN-LAST:event_generateReportActionPerformed

    
    private void fillGrid()
    {
        
        
        number = 0;
        
        TableOfDetails.setRowSelectionAllowed(true);                
        model = (DefaultTableModel) TableOfDetails.getModel();
        TableOfDetails.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        for( int i = model.getRowCount() - 1; i >= 0; i-- ) {   // empties all the entires in JTable 
           model.removeRow(i);
        }
              
        
        try {
        
                initialize_connection();

                resultset1 = statement1.executeQuery("Select * from "+tableE);

                while(resultset1.next()){

                    newrow[0] = resultset1.getString(5); // title
                    resultset2 = statement2.executeQuery("Select * from "+tableC+" WHERE CategoryId='"+resultset1.getString(3)+"'");
                    resultset2.next();
                    newrow[1] = resultset2.getString(2); // categoryId.. 3rd column in database table ExpenseIncomeMaster
                    newrow[2] = resultset1.getDate(2).toString(); // date
                    newrow[3] = Math.abs(Integer.valueOf(resultset1.getString(4))); // absolute amt
                    if( Integer.valueOf( resultset1.getString(4)) >= 0)
                        newrow[4] = "Income";
                    else
                        newrow[4] = "Expense";
                    newrow[5] = resultset1.getString(6); // details


                    model.addRow(newrow);

                    number++;
                }
        
        
        }catch(ClassNotFoundException | SQLException e){
            
        }finally { // Closing database connections after getting the values from database.
              
            close_connection();
            
        }    
    }
    
    /*
     * @Made by Jainam & Varun...
     * Code improvement suggested by Charvak
     * Helped by Dishank, Pratham, Jaimin, Vishal
     */
    
    @SuppressWarnings("unchecked")
    public static void main() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                
                n = new NewJFrame();
                n.setTitle("Home Accounting System- Mini Project");
                n.setResizable(false);
                n.setVisible(true);
            }
        });
    }

    static NewJFrame n;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox Credit_Card_Payments;
    private javax.swing.JTabbedPane MainTabPane;
    private javax.swing.JTable TableOfDetails;
    private javax.swing.JCheckBox automobile;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox buy_investment;
    private javax.swing.JCheckBox cash_withdrawal;
    private javax.swing.JComboBox categories1;
    private javax.swing.JCheckBox charitable_donations;
    private javax.swing.JCheckBox children_toys;
    private javax.swing.JCheckBox clothing;
    private com.toedter.calendar.JDateChooser date;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextArea details;
    private javax.swing.JCheckBox dining_out;
    private javax.swing.JButton editButton;
    private javax.swing.JCheckBox education;
    private javax.swing.JLabel end1_date_warn;
    private com.toedter.calendar.JDateChooser end_date1;
    private javax.swing.JLabel end_date_label1;
    private javax.swing.JCheckBox entertainment;
    private javax.swing.JPanel entrytable_panel;
    private javax.swing.JCheckBox fees;
    private javax.swing.JTable find_subtotal_table;
    private javax.swing.JButton generateReport;
    private javax.swing.JButton generate_subtotals;
    private javax.swing.JCheckBox gifts;
    private javax.swing.JCheckBox groceries;
    private javax.swing.JCheckBox healthcare;
    private javax.swing.JCheckBox hobbies_leisure;
    private javax.swing.JCheckBox home_improvement;
    private javax.swing.JCheckBox household;
    private javax.swing.JCheckBox income_interest;
    private javax.swing.JCheckBox insurance;
    private javax.swing.JCheckBox investment_income;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JCheckBox loan;
    private javax.swing.JCheckBox miscellaneous;
    private javax.swing.JCheckBox mortgage_rent;
    private javax.swing.JCheckBox other_income;
    private javax.swing.JCheckBox personal_care;
    private javax.swing.JCheckBox pet_care;
    private javax.swing.JCheckBox phone_wireless;
    private javax.swing.JButton send_back_from_table;
    private javax.swing.JButton send_to_table;
    private javax.swing.JCheckBox services_mem;
    private javax.swing.JLabel st1_date_warn;
    private com.toedter.calendar.JDateChooser start_date1;
    private javax.swing.JLabel start_date_label1;
    private javax.swing.JButton submitButton;
    private javax.swing.JPanel subtotal_panel;
    private javax.swing.JCheckBox taxes;
    private javax.swing.JTextField title;
    private javax.swing.JTextField transaction_amt;
    private javax.swing.JComboBox transaction_type;
    private javax.swing.JCheckBox travel_vacation;
    private javax.swing.JCheckBox utilities;
    private javax.swing.JCheckBox wages_salary;
    private javax.swing.JLabel warn;
    private javax.swing.JLabel warn2;
    // End of variables declaration//GEN-END:variables

    public void deleteRow(){

        flag = 0; // if editButton is pressed prior to submitButton
        selectRow = TableOfDetails.getSelectedRow();

        
        int deleteRow, editRow;
        int response;
        JDialog.setDefaultLookAndFeelDecorated(true);
        
        if(selectRow != -1){
            
            response = JOptionPane.showConfirmDialog(null, "Surely delete the selected entry?", "Confirm",
            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            
            if(response == JOptionPane.YES_OPTION){
            
                
                deleteRow = selectRow+1;
                warn.setText("");


                number--;
                try {
                    
                    initialize_connection();
                
                    // following stmt removes the contents from the database tableE
                    statement1.executeUpdate("Delete from "+tableE+" where ExpenseIncomeID='"+deleteRow+"'");
                    
                    
                    for(int y=deleteRow; y<=model.getRowCount(); y++)   //sets all the EIids of rows below the deleted one as -1 then their prev values
                    {
                        editRow = y+1;
                        statement2.executeUpdate("Update "+tableE+" set ExpenseIncomeID='"+y+"' where ExpenseIncomeID='"+editRow+"'");
                    }

                    
                    fillGrid();
                    
                } catch (SQLException | ClassNotFoundException e) {
                    System.out.println(e.getMessage());
                    System.out.println("problem");
                } finally {
                    
                    close_connection();

                }
            }

        }
        else{
            warn.setText("Select 1 row to delete");
        }


    }
}



